from typing import List
import datetime as dt
import yfinance as yf

from persistence import Persistence

class Instrument:


    def __init___(self) -> None:
        pass


    # LS Exchange BÃ¶rse Hamburg
    def __init__(self, id: int, isin: str, wkn: str, name: str, ticker_symbols: List[str], type: str, last_updated: dt.datetime) -> None:
        """_summary_

        Args:
            isin (str): International Securities Identification Number
            wkn (str): Wertpapierkennnummer
            name (str): Name of the instrument
            ticker_symbols (str): Array of ticker symbols
            type (str): stock, bond, etf, crypto, etc.
            last_updated (str): newes historical data
        """
        self.id = id # auto generated by database: needed to link historical data
        self.isin = isin
        self.wkn = wkn
        self.name = name
        self.ticker_symbols = ticker_symbols
        self.type = type
        self.last_updated = last_updated
        self.date_of_view = dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        yf.set_tz_cache_location("./.fycache")


    def get_by_id(self, isin: str) -> Instrument:


    def _load_historical_data(self) -> bool:
        try:
            ticker = yf.Ticker(self.symbol)
            data = ticker.history(period="max", interval="1d")
            return data
        except Exception as e:
            print(f"Error loading historical data for {self.symbol}: {e}")
            return False


    def save_historical_data(self) -> None:
        data = self._load_historical_data()
        persistence = Persistence()
        persistence.save_historical_data(self.id, data)